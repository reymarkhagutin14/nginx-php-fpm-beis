#!/bin/bash
# start SSH service
#/etc/init.d/sshd restart

# Get environment variables to show up in SSH session

setup_wp_config(){
  # Generate vars for wp-config.php injection
  echo "Generating PHP Defines from ENV..."
  DEFINES=$(awk -v pat="$WPFPM_FLAG" 'END {
    print "// Generated by docker-entrypoint2.sh:";

    for (name in ENVIRON) {
      if ( name ~ pat ) {
        print "define(\"" substr(name, length(pat)+1) "\", \"" ENVIRON[name] "\");"
      }
  }

    print " "
  }' < /dev/null)
  echo $DEFINES

  echo "Adding Defines to wp-config.php..."

  # Remove previously-injected vars
  sed '/\/\/ENTRYPOINT_START/,/\/\/ENTRYPOINT_END/d' wp-config.php > wp-config.tmp

  # Add current vars
  awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' wp-config.tmp > wp-config.php <<EOF
  //ENTRYPOINT_START

  $DEFINES

  if (isset(\$_SERVER['HTTP_X_FORWARDED_PROTO']) && \$_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
    \$_SERVER['HTTPS'] = 'on';
  }

  //ENTRYPOINT_END

EOF

  rm wp-config.tmp

}

add_wp_configs(){
  mv $CON_FILE.php $CON_FILE.tmp 
  awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' $CON_FILE.tmp > $CON_FILE.php <<EOPHP
  $DEFINE_CODE    
EOPHP
  rm $CON_FILE.tmp
}

add_redis_host(){
  mv $CON_FILE.php $CON_FILE.tmp 
  awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' $CON_FILE.tmp > $CON_FILE.php <<'EOPHP'
    define('WP_REDIS_HOST', getenv('WP_REDIS_HOST'));    
EOPHP
  rm $CON_FILE.tmp
}

add_mysql_ssl_ca(){
  mv $CON_FILE.php $CON_FILE.tmp 
  awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' $CON_FILE.tmp > $CON_FILE.php <<'EOPHP'
    define('MYSQL_SSL_CA', getenv('MYSQL_SSL_CA'));    
EOPHP
  rm $CON_FILE.tmp
}

add_mysql_client_flag(){
  mv $CON_FILE.php $CON_FILE.tmp 
  awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' $CON_FILE.tmp > $CON_FILE.php <<'EOPHP'
    define('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL | MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT);
EOPHP
  rm $CON_FILE.tmp
}

add_redis_ssl_client_flag(){  
  grep -q "define('WP_REDIS_HOST', getenv('WP_REDIS_HOST'));" $CON_FILE.php
  if [ "$?" -eq '0' ]; then
    echo "Redis Host is exist in "$CON_FILE".php ..."
  else
    echo "ADD Redis host into "$CON_FILE".php ..."
    #add_redis_host
    DEFINE_CODE="define('WP_REDIS_HOST', getenv('WP_REDIS_HOST'));"
    add_wp_configs 
  fi
  sed -i "s/#define('MYSQL_SSL_CA'/define('MYSQL_SSL_CA'/g" $CON_FILE.php
  grep -q "define('MYSQL_SSL_CA', getenv('MYSQL_SSL_CA'));" $CON_FILE.php
  if [ "$?" -eq '0' ]; then
    echo "MYSQL_SSL_CA is exist in "$CON_FILE".php ..."
  else
    echo "ADD MYSQL_SSL_CA into "$CON_FILE".php ..."
    #add_mysql_ssl_ca
    DEFINE_CODE="define('MYSQL_SSL_CA', getenv('MYSQL_SSL_CA'));"
    add_wp_configs
  fi
  sed -i "s/#define('MYSQL_CLIENT_FLAGS'/define('MYSQL_CLIENT_FLAGS'/g" $CON_FILE.php
  grep -q "define('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL | MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT);" $CON_FILE.php
  if [ "$?" -eq '0' ]; then
    echo "MYSQL_CLIENT_FLAGS is exist in "$CON_FILE".php ..."
  else
    echo "ADD MYSQL_CLIENT_FLAGS into "$CON_FILE".php ..."
    #add_mysql_client_flag
    DEFINE_CODE="define('MYSQL_CLIENT_FLAGS', MYSQLI_CLIENT_SSL | MYSQLI_CLIENT_SSL_DONT_VERIFY_SERVER_CERT);"
    add_wp_configs
  fi  
}

eval $(printenv | awk -F= '{print "export " $1"="$2 }' >> /etc/profile)

#set -euo pipefail

echo "Setup openrc ..." && openrc && touch /run/openrc/softlevel
echo "Starting SSH ..."
rc-service sshd start

# Remove exec from original entrypoint so we can continue here
sed -i -e 's/exec/\# exec/g' /usr/local/bin/docker-entrypoint.sh

# Normal setup
cd /var/www/html
/bin/bash /usr/local/bin/docker-entrypoint.sh $1

cd /var/www/html
cp /usr/src/BaltimoreCyberTrustRoot.crt.pem .
CON_FILE=wp-config-sample
if [ -e $CON_FILE.php ]; then 
  add_redis_ssl_client_flag
fi

# The wp-config.php is created as soon as there are some application settings exist.
if [ -e wp-config.php ]; then  
  setup_wp_config
  CON_FILE=wp-config
  add_redis_ssl_client_flag  
fi


# Install Nginx Helper plugin
if [ ! -e wp-content/plugins/nginx-helper ]; then
  if ( wget https://downloads.wordpress.org/plugin/nginx-helper.1.9.10.zip ); then
    unzip nginx-helper.1.9.10.zip -q -d /var/www/html/wp-content/plugins/
    rm nginx-helper.1.9.10.zip
  else
    echo "## WARN: wget failed for https://downloads.wordpress.org/plugin/nginx-helper.1.9.10.zip"
  fi
fi

# Install Redis Cache plugin
if [ ! -e wp-content/plugins/redis-cache ]; then
  if ( wget https://downloads.wordpress.org/plugin/redis-cache.1.3.8.zip ); then
    unzip redis-cache.1.3.8.zip -q -d /var/www/html/wp-content/plugins/
    rm redis-cache.1.3.8.zip
  else
    echo "## WARN: wget failed for https://downloads.wordpress.org/plugin/redis-cache.1.3.8.zip"
  fi
fi

# Set up Nginx Helper log directory
mkdir -p wp-content/uploads/nginx-helper

# Set usergroup for all modified files
chown -R www-data:www-data /var/www/html/

echo "Starting php-fpm ..."
exec "$@"

